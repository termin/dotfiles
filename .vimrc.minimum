"----------------------------------------------------
" Notice
"----------------------------------------------------
"----------------------------------------------------
" TODO:
"----------------------------------------------------
"----------------------------------------------------
" Pre
"----------------------------------------------------
" 設定されているautocmdをクリア.
" TODO: augroupで書き換えたい.
autocmd!
" augroup MyAutoCmd
	" autocmd!
" augroup END

" mapping削除
mapclear

"----------------------------------------------------
" Basic
"----------------------------------------------------
" vi非互換モード
set nocompatible
" ビープ音を鳴らさない
set vb t_vb=
" バックスペースキーで削除できるものを指定
set backspace=indent,eol,start
" 共有クリップボードを使う
" set clipboard+=unnamed
" ヘルプドキュメントの検索順
" set helplang=ja
" バッファを切替えてもundoの効力を失わない
set hidden
" 改行コードの自動認識
set fileformats=unix,dos,mac
" [変更あり]" の代わりに "[+]" を表示
set shortmess& shortmess+=m

" K でVim helpを検索する
set keywordprg=:help

" 日本語helpの一部に開けない物があるのでその対策.
set notagbsearch

" windowの境界だけマウスホイールで変えたい
if has('mouse')
	set mouse& mouse+=a
	" map <ScrollWheelUp> <Nop>
	" map <ScrollWheelDown> <Nop>
	map <S-ScrollWheelUp> <Nop>
	map <S-ScrollWheelDown> <Nop>
	map <C-ScrollWheelUp> <Nop>
	map <C-ScrollWheelDown> <Nop>
	map <M-ScrollWheelUp> <Nop>
	map <M-ScrollWheelDown> <Nop>
endif

"----------------------------------------------------
" Backup
"----------------------------------------------------
" バックアップをとる
" set backup
" ファイルの上書きの前にバックアップを作る. ただし, backup がオンでない限り、バックアップは上書きに成功した後削除される.
" set writebackup
" バックアップファイルを作るディレクトリ
" set backupdir=~/backup
" スワップファイルを作るディレクトリ
" set directory=~/swap

"----------------------------------------------------
" Appearance
"----------------------------------------------------
colorscheme default
set background=light
set number							" 行番号表示
set showmode						" モード表示
set title							" 編集中のファイル名を表示
set ruler							" ルーラーを表示
set showcmd							" 入力中のコマンドをステータスに表示する
set showmatch						" 括弧入力時の対応する括弧を表示
set laststatus=2					" ステータスラインを常に表示
set wildmenu						" コマンドライン補完拡張
set wildmode=list:longest,full
set matchtime=2						" 対応する括弧の表示時間を2にする
syntax on							" シンタックスハイライト

" 全角スペースを明示
highlight ZenkakuSpace cterm=underline ctermfg=lightblue guibg=darkgray
match ZenkakuSpace /　/

" ステータスラインに表示する情報の指定
set statusline=%n\:%y%F\ \|%{(&fenc!=''?&fenc:&enc).'\|'.&ff.'\|'}%m%r%=<%l/%L:%p%%>

" for debian
" コメント文の色を変更
" highlight Comment ctermfg=lightcyan
" highlight Comment ctermfg=lightblue

" ステータスラインの色
" highlight StatusLine   term=NONE cterm=NONE ctermfg=black ctermbg=white

"----------------------------------------------------
" Search
"----------------------------------------------------
set ignorecase						" 検索の時に大文字小文字を区別しない
set smartcase						" 検索の時に大文字が含まれている場合は区別して検索する
set wrapscan						" 最後まで検索したら先頭に戻る
set incsearch						" インクリメンタルサーチを使う
set hlsearch						" 検索結果文字列のハイライト表示
set history=100						" コマンド、検索パターンを100個まで履歴に残す

"----------------------------------------------------
" べんり
"----------------------------------------------------
filetype plugin indent on " ファイルタイプ判定をon
" autocmd BufNewFile *.rb 0r ~/.vim/template/skeleton.ruby
" autocmd FileType ruby setlocal ts=2 | set sw=2 | set expandtab | let ruby_space_errors = 1
" autocmd BufNewFile,BufRead *.yaml set filetype=ruby
" autocmd BufNewFile,BufRead *.erb setlocal ts=2 | set sw=2 | set expandtab
" autocmd FileType yaml setlocal filetype=ruby
" ファイルを開いた際に、前回終了時の行で起動
" autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif
autocmd BufNewFile,BufRead *.ctp set filetype=php
autocmd FileType php setlocal ts=4 sw=4 sts=4 noexpandtab

" autocmd QuickfixCmdPost grep,grepadd,vimgrep copen

"----------------------------------------------------
" Indent
"----------------------------------------------------
set autoindent
set smartindent
set pastetoggle=<F2>
" インサートモードを抜けたときにpaste解除
autocmd InsertLeave * set nopaste
" set expandtab
set tabstop=4
set shiftwidth=4
" set softtabstop=0

"----------------------------------------------------
" Encoding
"----------------------------------------------------
" 文字コードの設定
" 『viで日本語の文字コードを自動判別 - 玉虫色に染まれ！』 http://d.hatena.ne.jp/over80/20080907/1220794834
" fileencodingsの設定ではencodingで設定している値を一番最後に記述する
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
" set fileencodings=ucs-bom,iso-2022-jp,euc-jp,sjis,cp932,utf-8
set fileencodings=utf-8,ucs-bom,iso-2022-jp,euc-jp,sjis,cp932

" au BufWritePost * call SetUTF8Xattr(expand("<afile>"))

" function! SetUTF8Xattr(file)
	" let isutf8 = &fileencoding == "utf-8" || ( &fileencoding == "" && &encoding == "utf-8")
	" if has("unix") && match(system("uname"),'Darwin') != -1
		" call system("xattr -w com.apple.TextEncoding 'utf-8;134217984' '" . a:file . "'")
	" endif
" endfunction

"----------------------------------------------------
" Key Mapping
"----------------------------------------------------
" 修飾キーについて
" 『ぼちぼち散歩 ku source:
" mrufileとmrucommand続き，およびMac上のVimでOptionキーを扱う方法』 http://relaxedcolumn.blog8.fc2.com/blog-entry-152.html

" CTRL-s はttyでstopとして使われてた. 同様にCTRL-qはstart
"
" TODO:
" Mac Terminal.appの場合
" <修飾キー-Tab>は使えなかった. 修飾キーはM, Cが使えた. 但しMは, Terminal.appでoptionをMetaとして使うにチェックする. → 今は再現しないけど...
" <Right>, <Left> 等はどうやっても使えない感じ.
" <M-x>は, <Esc>x でもイケる！ <Esc><C-x>とか.
" helpでは"<D-"でCommand Keyが使えるとしているけれど, 設定しても使えなかった.

" TODO: Metaを使いたくて出来なかったキーを<Esc>で記述する.

" *後で何かに割り当てるKey
" CTRL-G CTRL-K CTRL-N CTRL-M i_CTRL-M CTRL-P i_CTRL-J i_CTRL-K

" omapを使って整理したい様な気がする.

" *確認したい
" i_CTRL-X_CTRL_{x} なキーバインドについて確認.

" *使う
" i_CTRL-X_CTRL-L
" mark: m{a-zA-Z} , call: '{a-zA-Z}
" Exモード(連続コマンド): Q or gQ :vi[sual]で抜ける.

let mapleader = ";"
nnoremap <SLeader> <Nop>
nmap , <SLeader>

nnoremap <Leader>hh :<C-u>tabnew<CR>:h<Space>
nnoremap <Leader>he :<C-u>tabnew<CR>:e $MYVIMRC<CR>
nnoremap <Leader>hr :<C-u>w<CR>:source $MYVIMRC<CR>

" Window, Tab関連
nnoremap <silent> <C-h> :<C-u>tabprevious<CR>
nnoremap <silent> <C-l> :<C-u>tabnext<CR>
" nnoremap gr gT
nnoremap <silent> <Esc><S-h> :<C-u>execute 'tabmove' tabpagenr() -2<CR>
nnoremap <silent> <Esc><S-l> :<C-u>execute 'tabmove' tabpagenr()<CR>
nnoremap <silent> g0 :<C-u>tabfirst<CR>
nnoremap <silent> g9 :<C-u>tablast<CR>
" tmuxで<C-t>をprefix keyに使う様になったので退避
" nnoremap <silent> <C-w><C-t> :<C-u>tabnew<CR>
nnoremap <silent> <C-w>t :<C-u>tabnew<CR>
noremap <C-j> 5j
noremap <C-k> 5k

" tagsearch
nnoremap <Esc>t <Nop>
nnoremap <Esc>t<Esc>t <C-]>
nnoremap <Esc>t<Esc>j :<C-u>tag<CR>
nnoremap <Esc>t<Esc>k :<C-u>pop<CR>
nnoremap <Esc>t<Esc>h :<C-u>tags<CR>
nnoremap st :<C-u>tags<CR>
nnoremap sT :<C-u>map<C-T><CR>

nnoremap <silent> <Esc><Esc> :<C-u>nohlsearch<CR>
" Yでクリップボードにコピー
noremap Y "*yy
nnoremap s <Nop>
nnoremap ss :<C-u>nmap s<CR>
nnoremap sm :<C-u>marks<CR>
nnoremap sr :<C-u>registers<CR>
nnoremap sc :<C-u>changes<CR>
nnoremap sb :<C-u>buffers<CR>
nnoremap s<Leader> :<C-u>map <Leader><CR>

inoremap <silent> <C-a> <Esc>I
" neocomplcacheと被ってる.でもどっちのキーバインドも使って無い.
" inoremap <silent> <C-e> <Esc>A

"----------------------------------------------------
" Plugins
"----------------------------------------------------
"----------------------------------------------------
" Post
"----------------------------------------------------
" 環境依存の設定
" if filereadable(expand('~/.vimrc.local'))
	" source ~/.vimrc.local
" endif

